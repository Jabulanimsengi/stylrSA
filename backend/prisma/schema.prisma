// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  password             String
  firstName            String
  lastName             String
  role                 UserRole        @default(CLIENT)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  salons               Salon[]
  products             Product[] // Relation to products
  productOrders        ProductOrder[] @relation("BuyerOrders")
  salesOrders          ProductOrder[] @relation("SellerOrders")
  bookings             Booking[]
  reviews              Review[]
  favorites            Favorite[]
  serviceLikes         ServiceLike[]
  sentMessages         Message[]       @relation("SentMessages")
  conversations1       Conversation[]  @relation("User1Conversations")
  conversations2       Conversation[]  @relation("User2Conversations")
  notifications        Notification[]
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  oauthAccounts        OAuthAccount[]

  // Email verification
  emailVerified        Boolean         @default(false)
  verificationToken    String?         @unique
  verificationExpires  DateTime?

  // Account security
  failedLoginAttempts  Int             @default(0)
  accountLockedUntil   DateTime?
  lastLoginAt          DateTime?

  // 2FA/MFA (for admin accounts)
  twoFactorEnabled     Boolean         @default(false)
  twoFactorSecret      String?
  twoFactorBackupCodes String[]        @default([])

  // Product seller plan fields (used when role = PRODUCT_SELLER)
  sellerPlanCode        PlanCode?
  sellerVisibilityWeight Int?         @default(1)
  sellerMaxListings      Int?         @default(2)
  sellerFeaturedUntil    DateTime?
  sellerPlanPriceCents   Int?
  sellerPlanPaymentStatus PlanPaymentStatus @default(PENDING_SELECTION)
  sellerPlanPaymentReference String?
  sellerPlanProofSubmittedAt DateTime?
  sellerPlanVerifiedAt   DateTime?

  @@index([email])
  @@index([verificationToken])
}

model Salon {
  id                   String         @id @default(uuid())
  name                 String
  description          String?
  backgroundImage      String?
  province             String
  heroImages           String[]
  city                 String
  town                 String
  address              String?
  latitude             Float?
  longitude            Float?
  contactEmail         String?
  phoneNumber          String?
  whatsapp             String?
  website              String?
  bookingType          BookingType    @default(ONSITE)
  offersMobile         Boolean        @default(false)
  mobileFee            Float?
  isAvailableNow       Boolean        @default(false)
  operatingHours       Json?
  operatingDays        String[]
  approvalStatus       ApprovalStatus @default(PENDING)
  avgRating            Float          @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  ownerId              String         @unique
  owner                User           @relation(fields: [ownerId], references: [id])
  services             Service[]
  bookings             Booking[]
  reviews              Review[]
  favorites            Favorite[]
  gallery              GalleryImage[]

  // Plan & visibility controls
  planCode             PlanCode?      @default(STARTER)
  visibilityWeight     Int            @default(1)
  maxListings          Int            @default(2)
  featuredUntil        DateTime?
  planPriceCents       Int?
  planPaymentStatus    PlanPaymentStatus @default(PENDING_SELECTION)
  planPaymentReference String?
  planProofSubmittedAt DateTime?
  planVerifiedAt       DateTime?
  @@index([approvalStatus])
  @@index([city])
  @@index([province])
}

// New Model for Service Categories
model ServiceCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id             String         @id @default(uuid())
  title          String
  description    String
  price          Float
  duration       Int
  images         String[]
  approvalStatus ApprovalStatus @default(PENDING)
  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])
  
  // FIX: Made the relation optional to handle existing data
  categoryId     String?
  category       ServiceCategory? @relation(fields: [categoryId], references: [id])

  bookings       Booking[]
  likes          ServiceLike[]
  likeCount      Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  promotions     Promotion[] // Relation to promotions
  @@index([salonId])
  @@index([approvalStatus])
}

model Review {
  id             String         @id @default(uuid())
  rating         Int
  comment        String
  approvalStatus ApprovalStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  author         User           @relation(fields: [userId], references: [id])
  salonId        String
  salon          Salon          @relation(fields: [salonId], references: [id])
  bookingId      String         @unique
  booking        Booking        @relation(fields: [bookingId], references: [id])
  @@index([salonId])
}

model Booking {
  id          String        @id @default(uuid())
  bookingTime DateTime
  isMobile    Boolean
  totalCost   Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  salonId     String
  salon       Salon         @relation(fields: [salonId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  clientPhone String?
  review      Review?
  @@index([userId])
  @@index([salonId])
  @@index([serviceId])
}

// New Model for Products
model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  images         String[]
  isOnSale       Boolean        @default(false)
  salePrice      Float?
  approvalStatus ApprovalStatus @default(PENDING)
  stock          Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  sellerId       String
  seller         User           @relation(fields: [sellerId], references: [id])
  promotions     Promotion[]
  orders         ProductOrder[]
}

// New Model for Promotions
model Promotion {
  id                 String    @id @default(uuid())
  description        String
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  serviceId          String?
  service            Service?  @relation(fields: [serviceId], references: [id])
  productId          String?
  product            Product?  @relation(fields: [productId], references: [id])
}

model Conversation {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  isRead         Boolean      @default(false)
  deliveredAt    DateTime?
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  @@index([conversationId])
  @@index([senderId])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String?
  link      String?
  @@index([userId])
}

model ProductOrder {
  id            String              @id @default(uuid())
  productId     String
  product       Product             @relation(fields: [productId], references: [id])
  buyerId       String
  buyer         User                @relation("BuyerOrders", fields: [buyerId], references: [id])
  sellerId      String
  seller        User                @relation("SellerOrders", fields: [sellerId], references: [id])
  quantity      Int
  totalPrice    Float
  status        ProductOrderStatus  @default(PENDING)
  deliveryMethod String?
  contactPhone  String?
  notes         String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
}

model Favorite {
  userId    String
  salonId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  salon     Salon    @relation(fields: [salonId], references: [id])

  @@id([userId, salonId])
  @@index([salonId])
}

model ServiceLike {
  userId    String
  serviceId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@id([userId, serviceId])
  @@index([serviceId])
}

model GalleryImage {
  id        String   @id @default(uuid())
  imageUrl  String
  caption   String?
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id])
  createdAt DateTime @default(now())
  @@index([salonId])
}

enum UserRole {
  CLIENT
  SALON_OWNER
  ADMIN
  PRODUCT_SELLER // New role
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingType {
  ONSITE
  MOBILE
  BOTH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DECLINED
  COMPLETED
  CANCELLED
}

enum ProductOrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// Social login linkage
model OAuthAccount {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String
  providerAccountId  String
  createdAt          DateTime @default(now())
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Subscription plans (seeded)
model Plan {
  id               String   @id @default(uuid())
  code             PlanCode @unique
  name             String
  priceCents       Int
  visibilityWeight Int
  maxListings      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum PlanCode {
  FREE
  STARTER
  ESSENTIAL
  GROWTH
  PRO
  ELITE
}

enum PlanPaymentStatus {
  PENDING_SELECTION
  AWAITING_PROOF
  PROOF_SUBMITTED
  VERIFIED
}

// Archive for deleted provider profiles to enable restoration
model DeletedSalonArchive {
  id         String   @id @default(uuid())
  salonId    String
  ownerId    String
  salon      Json
  services   Json
  reason     String?
  deletedBy  String?
  deletedAt  DateTime @default(now())
  restoredAt DateTime?
  @@index([deletedAt])
}

// Archive for deleted product seller profiles to enable restoration
model DeletedSellerArchive {
  id         String   @id @default(uuid())
  sellerId   String
  seller     Json
  products   Json
  reason     String?
  deletedBy  String?
  deletedAt  DateTime @default(now())
  restoredAt DateTime?
  @@index([deletedAt])
}

// Admin activity/audit log
model AdminActionLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  reason     String?
  metadata   Json?
  createdAt  DateTime @default(now())
  @@index([createdAt])
  @@index([targetType, targetId])
}